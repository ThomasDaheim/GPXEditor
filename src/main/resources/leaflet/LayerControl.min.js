function changeMapLayerUrl(c,a){window["layer"+c].setUrl(a)}var OpenMapSurfer_ContourLines=L.tileLayer("https://maps.heigit.org/openmapsurfer/tiles/asterc/webmercator/{z}/{x}/{y}.png",{maxZoom:18,attribution:"Imagery from GIScience Research Group @ University of Heidelberg | Map data ASTER GDEM"});OpenMapSurfer_ContourLines.setZIndex(97);var Hydda_RoadsAndLabels=L.tileLayer("https://{s}.tile.openstreetmap.se/hydda/roads_and_labels/{z}/{x}/{y}.png",{maxZoom:18,attribution:"Tiles courtesy of OpenStreetMap Sweden &mdash; Map data &copy; OpenStreetMap contributors"});
Hydda_RoadsAndLabels.setZIndex(98);var HikeBike_HillShading=L.tileLayer("https://tiles.wmflabs.org/hillshading/{z}/{x}/{y}.png",{maxZoom:18,attribution:"&copy; OpenStreetMap"});HikeBike_HillShading.setZIndex(6);var OpenRailwayMap=L.tileLayer("https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png",{maxZoom:18,attribution:"Map data: &copy; OpenStreetMap contributors | Map style: &copy; OpenRailwayMap (CC-BY-SA)"}),hasOpenRailwayMap=!1;OpenRailwayMap.setZIndex(99);
controlLayer.addBaseLayer(L.tileLayer("https://opentopomap.org/{z}/{x}/{y}.png",{maxZoom:17,attribution:"Map data: &copy; OpenTopoMap.org"}),"OpenTopoMap");controlLayer.addBaseLayer(L.tileLayer("http://sgx.geodatenzentrum.de/wmts_topplus_open/tile/1.0.0/web/default/WEBMERCATOR/{z}/{y}/{x}.png",{maxZoom:18,attribution:"Map data: &copy; geodatenzentrum.de"}),"DE: TopPlusOpen");
controlLayer.addBaseLayer(L.tileLayer("http://www.ign.es/wmts/mapa-raster?service=WMTS&request=GetTile&version=1.0.0&format=image/jpeg&layer=MTN&tilematrixset=GoogleMapsCompatible&style=default&tilematrix={z}&tilerow={y}&tilecol={x}",{maxZoom:17,attribution:"Map data: &copy; IGN.es"}),"ES: Topo (IGN)");
const overlaysList={ITERATE_FIRST:0,CONTOUR_LINES:0,ROADS_AND_LABELS:1,HILL_SHADING:2,RAILWAY_LINES:3,ITERATE_LAST:3,properties:{0:{name:"Contour Lines",layer:OpenMapSurfer_ContourLines},1:{name:"Roads and Labels",layer:Hydda_RoadsAndLabels},2:{name:"Hill Shading",layer:HikeBike_HillShading},3:{name:"Railways",layer:OpenRailwayMap}}};function getKnownOverlayNames(){var c=[];for(let a=overlaysList.ITERATE_FIRST;a<=overlaysList.ITERATE_LAST;a++)c.push(overlaysList.properties[a].name);return c}
const baselayerList={ITERATE_FIRST:0,OPENCYCLEMAP:0,MAPBOX:1,OPENSTREETMAP:2,SATELLITEESRI:3,OPENTOPOMAP:4,DETOPPLUSOPEN:5,ESTOPOIGN:6,ITERATE_LAST:6,UNKNOWN:99,properties:{0:{name:"OpenCycleMap",overlays:[!1,!1,!1,!1]},1:{name:"MapBox",overlays:[!1,!1,!1,!1]},2:{name:"OpenStreetMap",overlays:[!1,!1,!1,!1]},3:{name:"Satellite Esri",overlays:[!1,!1,!1,!1]},4:{name:"OpenTopoMap",overlays:[!1,!1,!1,!1]},5:{name:"DE: TopPlusOpen",overlays:[!1,!1,!1,!1]},6:{name:"ES: Topo (IGN)",overlays:[!1,!1,!1,!1]},
99:{name:"UNKNOWN",overlays:[!1,!1,!1,!1]}}};baselayerList.properties[baselayerList.MAPBOX].overlays[overlaysList.CONTOUR_LINES]=!0;baselayerList.properties[baselayerList.OPENSTREETMAP].overlays[overlaysList.CONTOUR_LINES]=!0;baselayerList.properties[baselayerList.OPENSTREETMAP].overlays[overlaysList.HILL_SHADING]=!0;baselayerList.properties[baselayerList.SATELLITEESRI].overlays[overlaysList.CONTOUR_LINES]=!0;
baselayerList.properties[baselayerList.SATELLITEESRI].overlays[overlaysList.ROADS_AND_LABELS]=!0;function getKnownBaselayerNames(){var c=[];for(let a=baselayerList.ITERATE_FIRST;a<=baselayerList.ITERATE_LAST;a++)c.push(baselayerList.properties[a].name);return c}function getOverlayValues(c){var a=[!1,!1,!1,!1];for(let b=baselayerList.ITERATE_FIRST;b<=baselayerList.ITERATE_LAST;b++)if(c===baselayerList.properties[b].name){a=baselayerList.properties[b].overlays.slice(0);break}return a}
function setOverlayValues(c,a){for(let b=baselayerList.ITERATE_FIRST;b<=baselayerList.ITERATE_LAST;b++)c===baselayerList.properties[b].name&&(baselayerList.properties[b].overlays=a.slice(0))}var currentBaselayer=0,currentOverlays=baselayerList.properties[0].overlays.slice(0);baselayerchange({name:baselayerList.properties[0].name});function setCurrentBaselayer(c){document.getElementsByClassName("leaflet-control-layers")[0].getElementsByTagName("input")[c].click()}
function getCurrentBaselayer(){return currentBaselayer}
function baselayerchange(c){currentBaselayer=baselayerList.UNKNOWN;for(let a=baselayerList.ITERATE_FIRST;a<=baselayerList.ITERATE_LAST;a++)if(c.name===baselayerList.properties[a].name){currentBaselayer=a;break}logOverlays();baselayerList.properties[currentBaselayer].overlays.forEach(function(a,b){currentOverlays[b]!==a&&(currentOverlays[b]&&myMap.removeLayer(overlaysList.properties[b].layer),a&&myMap.addLayer(overlaysList.properties[b].layer));controlLayer.removeLayer(overlaysList.properties[b].layer);
controlLayer.addOverlay(overlaysList.properties[b].layer,overlaysList.properties[b].name)})}function overlayadd(c){overlayChanged(c,!0)}function overlayremove(c){overlayChanged(c,!1)}function overlayChanged(c,a){for(let b=overlaysList.ITERATE_FIRST;b<=overlaysList.ITERATE_LAST;b++)if(c.name===overlaysList.properties[b].name){currentOverlays[b]=a;baselayerList.properties[currentBaselayer].overlays[b]=a;break}logOverlays()}myMap.on("baselayerchange",baselayerchange);myMap.on("overlayadd",overlayadd);
myMap.on("overlayremove",overlayremove);function logOverlays(){};