var polyline={};function py2_round(a){return Math.floor(Math.abs(a)+.5)*Math.sign(a)}function encode(a,b,c){a=py2_round(a*c);b=py2_round(b*c);c=a-b<<1;0>a-b&&(c=~c);for(a="";32<=c;)a+=String.fromCharCode((32|c&31)+63),c>>=5;return a+=String.fromCharCode(c+63)}
polyline.decode=function(a,b){for(var c=0,f=0,h=0,k=[],e,d,g,l=Math.pow(10,b||5);c<a.length;){d=e=0;do g=a.charCodeAt(c++)-63,d|=(g&31)<<e,e+=5;while(32<=g);b=d&1?~(d>>1):d>>1;e=d=0;do g=a.charCodeAt(c++)-63,d|=(g&31)<<e,e+=5;while(32<=g);e=d&1?~(d>>1):d>>1;f+=b;h+=e;k.push([f/l,h/l])}return k};
polyline.encode=function(a,b){if(!a.length)return"";b=Math.pow(10,b||5);for(var c=encode(a[0][0],0,b)+encode(a[0][1],0,b),f=1;f<a.length;f++){var h=a[f],k=a[f-1];c+=encode(h[0],k[0],b);c+=encode(h[1],k[1],b)}return c};function flipped(a){for(var b=[],c=0;c<a.length;c++)b.push(a[c].slice().reverse());return b}
polyline.fromGeoJSON=function(a,b){a&&"Feature"===a.type&&(a=a.geometry);if(!a||"LineString"!==a.type)throw Error("Input must be a GeoJSON LineString");return polyline.encode(flipped(a.coordinates),b)};polyline.toGeoJSON=function(a,b){a=polyline.decode(a,b);return{type:"LineString",coordinates:flipped(a)}};"object"===typeof module&&module.exports&&(module.exports=polyline);